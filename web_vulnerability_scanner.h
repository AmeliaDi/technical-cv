/*
 * Advanced Web Vulnerability Scanner - Header File
 * Author: AmeliaDi <enorastrokes@gmail.com>
 * License: GPL v2
 */

#ifndef WEB_VULNERABILITY_SCANNER_H
#define WEB_VULNERABILITY_SCANNER_H

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <pthread.h>
#include <time.h>

// Constants
#define MAX_URL_LENGTH 2048
#define MAX_PARAMETER_LENGTH 256
#define MAX_TITLE_LENGTH 256
#define MAX_DESCRIPTION_LENGTH 1024
#define MAX_EVIDENCE_LENGTH 2048
#define MAX_RECOMMENDATION_LENGTH 1024
#define MAX_USER_AGENT_LENGTH 256
#define MAX_THREADS 50
#define MAX_SCAN_DEPTH 10
#define MAX_TIMEOUT 300
#define DEFAULT_MAX_DEPTH 3
#define DEFAULT_THREAD_COUNT 5
#define DEFAULT_TIMEOUT 30
#define DEFAULT_MAX_REQUESTS 1000
#define DEFAULT_REQUEST_DELAY 100
#define DEFAULT_USER_AGENT "WebVulnScanner/1.0 (Advanced Security Scanner)"

// Enumerations
typedef enum {
    OUTPUT_TEXT,
    OUTPUT_JSON,
    OUTPUT_XML
} output_format_t;

typedef enum {
    SEVERITY_CRITICAL,
    SEVERITY_HIGH,
    SEVERITY_MEDIUM,
    SEVERITY_LOW,
    SEVERITY_INFO
} severity_t;

typedef enum {
    VULN_SQL_INJECTION,
    VULN_XSS_REFLECTED,
    VULN_XSS_STORED,
    VULN_XSS_DOM,
    VULN_CSRF,
    VULN_DIRECTORY_TRAVERSAL,
    VULN_FILE_INCLUSION,
    VULN_COMMAND_INJECTION,
    VULN_LDAP_INJECTION,
    VULN_XPATH_INJECTION,
    VULN_XXE,
    VULN_SSRF,
    VULN_OPEN_REDIRECT,
    VULN_WEAK_AUTHENTICATION,
    VULN_SESSION_FIXATION,
    VULN_INSECURE_DIRECT_OBJECT_REF,
    VULN_MISSING_SECURITY_HEADERS,
    VULN_INFORMATION_DISCLOSURE,
    VULN_CLICKJACKING,
    VULN_SECURITY_MISCONFIGURATION
} vulnerability_type_t;

typedef enum {
    STAT_REQUESTS_SENT,
    STAT_RESPONSES_RECEIVED,
    STAT_VULNERABILITIES_FOUND,
    STAT_PAGES_CRAWLED,
    STAT_FORMS_FOUND,
    STAT_ERRORS_ENCOUNTERED
} stat_type_t;

// Data structures
typedef struct {
    char *target_url;
    int max_depth;
    int thread_count;
    int timeout;
    char *output_file;
    output_format_t output_format;
    int aggressive_mode;
    int verbose;
    int include_info;
    int follow_redirects;
    int verify_ssl;
    char *user_agent;
    int max_requests;
    int request_delay;
    char *cookies;
    char *custom_headers;
    char *exclude_paths;
} scan_config_t;

typedef struct {
    vulnerability_type_t type;
    severity_t severity;
    char title[MAX_TITLE_LENGTH];
    char url[MAX_URL_LENGTH];
    char parameter[MAX_PARAMETER_LENGTH];
    char description[MAX_DESCRIPTION_LENGTH];
    char evidence[MAX_EVIDENCE_LENGTH];
    char recommendation[MAX_RECOMMENDATION_LENGTH];
    time_t discovered_time;
} scan_result_t;

typedef struct {
    char url[MAX_URL_LENGTH];
    char method[16];
    char *parameters;
    char *headers;
    int depth;
    int visited;
} crawled_url_t;

typedef struct {
    char action[MAX_URL_LENGTH];
    char method[16];
    char **input_names;
    char **input_types;
    char **input_values;
    int input_count;
} form_data_t;

typedef struct {
    crawled_url_t *urls;
    int url_count;
    int url_capacity;
    form_data_t *forms;
    int form_count;
    int form_capacity;
    pthread_mutex_t mutex;
    scan_config_t *config;
} crawler_context_t;

typedef struct {
    scan_config_t *config;
    scan_result_t *results;
    int result_count;
    int result_capacity;
    pthread_mutex_t mutex;
} vulnerability_context_t;

typedef struct {
    time_t scan_start_time;
    double total_scan_time;
    int total_requests;
    int total_responses;
    int pages_crawled;
    int forms_found;
    int vulnerabilities_found;
    int errors_encountered;
} scan_statistics_t;

typedef struct {
    char *payload;
    char *expected_response;
    char *error_pattern;
    severity_t severity;
} test_payload_t;

// HTTP response structure
typedef struct {
    char *data;
    size_t size;
    long response_code;
    char *headers;
    size_t headers_size;
} http_response_t;

// Function prototypes

// Main functions
int parse_arguments(int argc, char *argv[], scan_config_t *config);
void print_usage(const char *program_name);
int validate_url(const char *url);

// Scanning functions
int start_vulnerability_scan(scan_config_t *config, scan_result_t **results, int *result_count);
int crawl_website(crawler_context_t *ctx);
int test_vulnerabilities(vulnerability_context_t *vuln_ctx, crawler_context_t *crawler_ctx, 
                        scan_result_t **results, int *result_count);

// Crawler functions
int init_crawler_context(crawler_context_t *ctx, scan_config_t *config);
void free_crawler_context(crawler_context_t *ctx);
int add_url_to_crawl(crawler_context_t *ctx, const char *url, int depth);
int extract_links_from_html(const char *html, const char *base_url, crawler_context_t *ctx);
int extract_forms_from_html(const char *html, const char *base_url, crawler_context_t *ctx);

// Vulnerability testing functions
int init_vulnerability_context(vulnerability_context_t *ctx, scan_config_t *config);
void free_vulnerability_context(vulnerability_context_t *ctx);
int test_sql_injection(vulnerability_context_t *ctx, crawler_context_t *crawler_ctx);
int test_xss_vulnerabilities(vulnerability_context_t *ctx, crawler_context_t *crawler_ctx);
int test_csrf_vulnerability(vulnerability_context_t *ctx, crawler_context_t *crawler_ctx);
int test_directory_traversal(vulnerability_context_t *ctx, crawler_context_t *crawler_ctx);
int test_file_inclusion(vulnerability_context_t *ctx, crawler_context_t *crawler_ctx);
int test_command_injection(vulnerability_context_t *ctx, crawler_context_t *crawler_ctx);
int test_xxe_vulnerability(vulnerability_context_t *ctx, crawler_context_t *crawler_ctx);
int test_ssrf_vulnerability(vulnerability_context_t *ctx, crawler_context_t *crawler_ctx);
int test_open_redirect(vulnerability_context_t *ctx, crawler_context_t *crawler_ctx);
int test_security_headers(vulnerability_context_t *ctx, crawler_context_t *crawler_ctx);
int test_authentication_bypass(vulnerability_context_t *ctx, crawler_context_t *crawler_ctx);
int test_session_management(vulnerability_context_t *ctx, crawler_context_t *crawler_ctx);

// HTTP functions
http_response_t* http_get(const char *url, scan_config_t *config);
http_response_t* http_post(const char *url, const char *data, scan_config_t *config);
void free_http_response(http_response_t *response);
size_t write_callback(void *contents, size_t size, size_t nmemb, http_response_t *response);
size_t header_callback(char *buffer, size_t size, size_t nitems, http_response_t *response);

// Payload functions
test_payload_t* get_sql_injection_payloads(int *count);
test_payload_t* get_xss_payloads(int *count);
test_payload_t* get_directory_traversal_payloads(int *count);
test_payload_t* get_command_injection_payloads(int *count);
test_payload_t* get_xxe_payloads(int *count);
void free_test_payloads(test_payload_t *payloads, int count);

// Report generation functions
int generate_report(scan_config_t *config, scan_result_t *results, int result_count);
void generate_text_report(FILE *fp, scan_config_t *config, scan_result_t *results, int count);
void generate_json_report(FILE *fp, scan_config_t *config, scan_result_t *results, int count);
void generate_xml_report(FILE *fp, scan_config_t *config, scan_result_t *results, int count);

// Utility functions
const char* severity_to_string(severity_t severity);
const char* vulnerability_type_to_string(vulnerability_type_t type);
int add_vulnerability_result(vulnerability_context_t *ctx, vulnerability_type_t type, 
                           severity_t severity, const char *title, const char *url, 
                           const char *parameter, const char *description, 
                           const char *evidence, const char *recommendation);
char* url_encode(const char *str);
char* url_decode(const char *str);
char* extract_domain(const char *url);
int is_same_domain(const char *url1, const char *url2);
char* normalize_url(const char *url, const char *base_url);

// Statistics functions
void init_scan_statistics(void);
void update_scan_statistics(stat_type_t type, int count);
void print_scan_statistics(void);

// Thread management
void* crawler_thread(void *arg);
void* vulnerability_test_thread(void *arg);

// Pattern matching functions
int check_sql_injection_response(const char *response);
int check_xss_response(const char *response, const char *payload);
int check_directory_traversal_response(const char *response);
int check_command_injection_response(const char *response);
int check_xxe_response(const char *response);
int check_error_patterns(const char *response, const char **patterns, int pattern_count);

// Security header analysis
int analyze_security_headers(const char *headers, scan_result_t *results, int *count);
int check_missing_headers(const char *headers);
int check_weak_headers(const char *headers);

// Authentication testing
int test_weak_passwords(vulnerability_context_t *ctx, const char *login_url);
int test_session_fixation(vulnerability_context_t *ctx, const char *login_url);
int test_session_hijacking(vulnerability_context_t *ctx, const char *url);

// Content analysis
int analyze_page_content(const char *content, const char *url, vulnerability_context_t *ctx);
int check_sensitive_information(const char *content);
int check_debug_information(const char *content);
int check_comments_disclosure(const char *content);

// Cleanup functions
void free_scan_results(scan_result_t *results, int count);
void cleanup_and_exit(int exit_code);

// Error handling
void log_error(const char *format, ...);
void log_info(const char *format, ...);
void log_debug(const char *format, ...);

#endif // WEB_VULNERABILITY_SCANNER_H 