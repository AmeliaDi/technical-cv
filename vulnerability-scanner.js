/**
 * Vulnerability Scanner - Arch Linux Theme Edition
 * Real-time security analysis with IP detection
 * @author Amelia Enora 🌈 Marceline Chavez Barroso
 * @version 4.0.0
 */

class VulnerabilityScanner {
    constructor() {
        this.isScanning = false;
        this.userIP = null;
        this.scanResults = [];
        this.terminalElement = null;
        this.currentStep = 0;
        this.scanSteps = [
            'Detecting visitor IP address...',
            'Performing DNS resolution...',
            'Scanning common ports...',
            'Checking for known vulnerabilities...',
            'Analyzing system information...',
            'Gathering OS fingerprint...',
            'Testing SSL/TLS configuration...',
            'Checking for CVE matches...',
            'Scanning for open services...',
            'Performing Arch Linux package audit...',
            'Analysis complete!'
        ];
        
        this.vulnerabilities = [
            {
                id: 'CVE-2024-0001',
                severity: 'HIGH',
                type: 'Buffer Overflow',
                description: 'Potential buffer overflow in network stack',
                port: 22,
                service: 'SSH'
            },
            {
                id: 'CVE-2024-0002',
                severity: 'MEDIUM',
                type: 'Information Disclosure',
                description: 'Version information leak in HTTP headers',
                port: 80,
                service: 'HTTP'
            },
            {
                id: 'CVE-2024-0003',
                severity: 'LOW',
                type: 'Configuration Issue',
                description: 'Default credentials detected',
                port: 443,
                service: 'HTTPS'
            }
        ];

        this.archPackages = [
            'linux 6.6.8.arch1-1 → 6.6.9.arch1-1',
            'systemd 254.5-1 → 254.6-1',
            'glibc 2.38-7 → 2.38-8',
            'openssl 3.1.4-1 → 3.1.5-1',
            'sudo 1.9.15-1 → 1.9.15-2'
        ];
    }

    init() {
        this.terminalElement = document.getElementById('scanner-output');
        if (this.terminalElement) {
            this.startScanning();
        }
    }

    async startScanning() {
        if (this.isScanning) return;
        
        this.isScanning = true;
        this.currentStep = 0;
        
        // Clear previous results
        this.terminalElement.innerHTML = '';
        
        await this.detectIP();
        await this.performScan();
        await this.displayResults();
        
        this.isScanning = false;
    }

    async detectIP() {
        this.addScanLine('Initializing Arch Linux Security Scanner...', 'info');
        await this.delay(800);
        
        try {
            const response = await fetch('https://ipapi.co/json/');
            const data = await response.json();
            this.userIP = data.ip;
            
            this.addScanLine(`Detected IP: ${this.userIP}`, 'success');
            this.addScanLine(`Location: ${data.city}, ${data.country_name}`, 'info');
            this.addScanLine(`ISP: ${data.org}`, 'info');
            this.addScanLine(`Connection: ${data.connection || 'Unknown'}`, 'info');
            
        } catch (error) {
            this.userIP = '127.0.0.1';
            this.addScanLine('IP detection failed, using localhost', 'warning');
        }
        
        await this.delay(1000);
        this.addScanLine('─────────────────────────────────────────', 'divider');
    }

    async performScan() {
        for (let i = 0; i < this.scanSteps.length; i++) {
            this.addScanLine(`[${this.getCurrentTime()}] ${this.scanSteps[i]}`, 'info');
            
            // Simulate scanning progress
            if (i === 2) {
                await this.simulatePortScan();
            } else if (i === 3) {
                await this.simulateVulnerabilityCheck();
            } else if (i === 9) {
                await this.simulatePackageAudit();
            }
            
            await this.delay(Math.random() * 1000 + 500);
        }
    }

    async simulatePortScan() {
        const commonPorts = [22, 80, 443, 21, 25, 53, 110, 993, 995, 3306];
        
        for (const port of commonPorts) {
            const isOpen = Math.random() > 0.7;
            const status = isOpen ? 'OPEN' : 'CLOSED';
            const statusClass = isOpen ? 'warning' : 'success';
            
            this.addScanLine(`  Port ${port}/tcp: ${status}`, statusClass);
            await this.delay(200);
        }
    }

    async simulateVulnerabilityCheck() {
        for (const vuln of this.vulnerabilities) {
            const severityClass = vuln.severity === 'HIGH' ? 'error' : 
                                vuln.severity === 'MEDIUM' ? 'warning' : 'info';
            
            this.addScanLine(`  [${vuln.severity}] ${vuln.id}: ${vuln.type}`, severityClass);
            this.addScanLine(`    Service: ${vuln.service} (Port ${vuln.port})`, '');
            this.addScanLine(`    ${vuln.description}`, '');
            await this.delay(300);
        }
    }

    async simulatePackageAudit() {
        this.addScanLine('  Checking Arch Linux package updates...', 'info');
        await this.delay(500);
        
        for (const pkg of this.archPackages) {
            this.addScanLine(`  📦 ${pkg}`, 'success');
            await this.delay(150);
        }
    }

    async displayResults() {
        await this.delay(500);
        this.addScanLine('─────────────────────────────────────────', 'divider');
        this.addScanLine('SCAN SUMMARY:', 'info');
        this.addScanLine(`  Target: ${this.userIP}`, '');
        this.addScanLine(`  Vulnerabilities Found: ${this.vulnerabilities.length}`, 'warning');
        this.addScanLine(`  High Risk: 1 | Medium Risk: 1 | Low Risk: 1`, '');
        this.addScanLine(`  Package Updates Available: ${this.archPackages.length}`, 'info');
        this.addScanLine('  Recommendation: Update system packages', 'success');
        this.addScanLine('─────────────────────────────────────────', 'divider');
        this.addScanLine('[SCAN COMPLETE] - Arch Linux Security Scanner', 'success');
        
        // Add some system info
        await this.delay(1000);
        this.addScanLine('', '');
        this.addScanLine('🖥️  System Information:', 'info');
        this.addScanLine(`  OS: Arch Linux (Rolling Release)`, '');
        this.addScanLine(`  Kernel: ${navigator.platform}`, '');
        this.addScanLine(`  Browser: ${navigator.userAgent.split(' ').pop()}`, '');
        this.addScanLine(`  Screen: ${screen.width}x${screen.height}`, '');
        this.addScanLine(`  CPU Cores: ${navigator.hardwareConcurrency || 'Unknown'}`, '');
    }

    addScanLine(text, type = '') {
        const line = document.createElement('div');
        line.className = `scanner-line ${type}`;
        
        // Add timestamp for certain types
        if (type === 'info' || type === 'success' || type === 'warning' || type === 'error') {
            const timeSpan = line.querySelector('.time') || document.createElement('span');
            timeSpan.className = 'time';
            timeSpan.textContent = this.getCurrentTime();
        }
        
        line.innerHTML = text;
        this.terminalElement.appendChild(line);
        
        // Auto-scroll to bottom
        this.terminalElement.scrollTop = this.terminalElement.scrollHeight;
        
        // Add typing effect for better UX
        line.style.opacity = '0';
        line.style.transform = 'translateY(10px)';
        
        setTimeout(() => {
            line.style.transition = 'all 0.3s ease';
            line.style.opacity = '1';
            line.style.transform = 'translateY(0)';
        }, 50);
    }

    getCurrentTime() {
        const now = new Date();
        return now.toTimeString().split(' ')[0];
    }

    delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    // Method to restart scan (called by UI)
    restartScan() {
        if (!this.isScanning) {
            this.startScanning();
        }
    }

    // Method to clear results
    clearResults() {
        if (this.terminalElement && !this.isScanning) {
            this.terminalElement.innerHTML = '';
            this.addScanLine('Scanner ready. Click to start new scan...', 'info');
        }
    }
}

// Auto-initialize when DOM is ready
document.addEventListener('DOMContentLoaded', () => {
    // Wait for other components to load
    setTimeout(() => {
        window.vulnerabilityScanner = new VulnerabilityScanner();
        window.vulnerabilityScanner.init();
    }, 1000);
    
    // Add click handler to restart scan
    document.addEventListener('click', (e) => {
        if (e.target.closest('.retro-pc-section')) {
            if (window.vulnerabilityScanner && !window.vulnerabilityScanner.isScanning) {
                window.vulnerabilityScanner.restartScan();
            }
        }
    });
}); 